{"version":3,"sources":["auth.js","question.js","utils.js","index.js"],"names":["authWithEmailAndPassword","email","password","login","document","querySelector","classList","add","disabled","axios","post","returnSecureToken","then","res","remove","data","idToken","catch","err","console","log","Question","question","body","id","name","all","getQuestionsFromLS","length","pop","unshift","localStorage","setItem","JSON","stringify","addToLocalStorage","renderList","questions","html","map","el","text","Date","date","toLocaleDateString","toCard","join","innerHTML","token","get","error","Object","keys","Promise","resolve","parse","getItem","isvalid","value","createModal","title","contetn","modalBlock","createElement","appendChild","addEventListener","close","form","input","submitBtn","plus","leftBlock","addButton","button","btn","removeItem","authemail","authpassword","getQuestions","renderModalAfterAuth","authFormHandler","window","event","preventDefault","trim","toJSON","create","target","content","listToHtml","authemailpassword"],"mappings":"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","file":"static/js/main.71c9f561.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nexport function getAuthForm() {\r\n    return `\r\n    <form class=\"auth_form\">\r\n        <div>\r\n            <input placeholder=\"email\" id=\"email\" type=\"text\">\r\n        </div>\r\n        <div>\r\n            <input placeholder=\"password\" type=\"text\" id=\"password\">\r\n        </div>\r\n        <button class=\"logIn\">\r\n            Войти\r\n        </button>\r\n    </form>\r\n    `\r\n};\r\n\r\nexport function authWithEmailAndPassword(email, password) {\r\n    const login = document.querySelector('.logIn');\r\n    const apikey = 'AIzaSyAeZn6iaK1Cqt3imSfKao2ippRrIyJjMJ8';\r\n    if(login){\r\n        login.classList.add('opasiti');\r\n        login.disabled = true;\r\n    }\r\n    return axios\r\n    .post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${apikey}`, {\r\n        email, \r\n        password,\r\n        returnSecureToken: true\r\n    })\r\n    .then(res => {\r\n        if(login){\r\n            login.classList.remove('opasiti');\r\n    }\r\n        return res.data.idToken\r\n    }).catch(err => console.log(err))\r\n}","import axios from \"axios\";\r\n\r\nexport class Question {\r\n    static create(question) {\r\n        return axios.post('https://podcast-app-b7cee-default-rtdb.firebaseio.com/questions.json', {body: question})\r\n        .then(res => {\r\n            question.id = res.data.name;\r\n            addToLocalStorage(question);\r\n            Question.renderList();\r\n        })\r\n    }\r\n    static renderList() {\r\n        const questions = getQuestionsFromLS();\r\n         const html = questions.length ? \r\n         `<h1 class=\"headerList\">Последние заметки из локального хранилища<hr></h1>${questions.map((el) => toCard(el)).join('')}` :\r\n         `<div class=\"none\">Вы пока ничего не спрашивали(локальное хранилище пустое)</div>`;\r\n\r\n         const list = document.querySelector('.list');\r\n         list.innerHTML = html;\r\n    }\r\n\r\n    static getQuestions(token) {\r\n\r\n        if(!token) {\r\n            return Promise.resolve('<p class=\"error\">У вас нету токена</p>')\r\n        }\r\n        return axios.get(`https://podcast-app-b7cee-default-rtdb.firebaseio.com/questions.json?auth=${token}`)\r\n        .then(res => {\r\n            if(res.data && res.data.error) {\r\n                return `<p class=\"error\">${res.data.error}</p>`\r\n            }\r\n            return res.data ? Object.keys(res.data).map(el => {\r\n                return {\r\n                    ...res.data[el],\r\n                    id: el\r\n                }\r\n            }): []\r\n        }\r\n        )\r\n    }\r\n    static listToHtml(questions) {\r\n        if(questions.length) {\r\n            return `\r\n            <ol>\r\n            ${questions.map(el => {\r\n                return `\r\n                <li>${el.body.text}</li>\r\n                `\r\n            }).join('')}\r\n            </ol>\r\n            `\r\n        } else {\r\n            return `<p>заметок на локальном хранилище пока нет</p>`\r\n        }\r\n    }\r\n};\r\n\r\nfunction toCard(el) {\r\n    return `\r\n    <div class=\"question_story\">\r\n        <div class=\"text\">${el.text}</div>\r\n        <div class=\"data\">${new Date(el.date).toLocaleDateString()}</div>\r\n    </div>\r\n    `\r\n}\r\n\r\nfunction addToLocalStorage(question) {\r\n    const all = getQuestionsFromLS();\r\n    if(all.length == 6){all.pop()}\r\n    all.unshift(question);\r\n    localStorage.setItem('question', JSON.stringify(all))\r\n}\r\n\r\nfunction getQuestionsFromLS() {\r\n    return JSON.parse(localStorage.getItem('question') || '[]');\r\n}","\r\nexport const isvalid = (value) => {\r\n    if(value.length >= 8 && value.length < 40) {\r\n        return true\r\n    }\r\n};\r\n\r\nexport const createModal = (title = '', contetn) => {\r\n    if(document.querySelector('.modalBlock')) {\r\n        document.querySelector('.modalBlock').remove()\r\n    }\r\n    const modalBlock = document.createElement('div');\r\n    modalBlock.classList.add('modalBlock');\r\n    document.body.appendChild(modalBlock);\r\n\r\n    const html = `\r\n    <div class=\"modal\">\r\n        <h1>${title}</h1>\r\n        <div>${contetn}</div>\r\n    </div>\r\n    <div class=\"iks\">&times;</div>\r\n    `;\r\n    modalBlock.innerHTML = html\r\n    document.querySelector('.iks')\r\n    .addEventListener('click', close)\r\n}\r\n\r\nfunction close() {\r\n    document.querySelector('.modalBlock').remove()\r\n}\r\n\r\n","import { authWithEmailAndPassword, getAuthForm } from './auth';\r\nimport { Question } from './question';\r\nimport './styles.scss'\r\nimport { isvalid, createModal } from './utils';\r\n\r\nconst form = document.querySelector('#form');\r\nconst input = form.querySelector('#question');\r\nconst submitBtn = form.querySelector('.submit');\r\nconst plus = document.querySelector('.plus');\r\nconst leftBlock = document.querySelector('.left_block');\r\n\r\n\r\n\r\nfunction addButton() {\r\n        if (JSON.parse(localStorage.getItem('isAuth'))) {\r\n        if(!document.querySelector('.logout')){\r\n            const button = document.createElement('button');\r\n            button.classList.add('logout');\r\n            button.innerHTML = 'Выйти';\r\n            leftBlock.appendChild(button);\r\n        }\r\n    } else {\r\n        if(document.querySelector('.logout')){\r\n            document.querySelector('.logout').remove()\r\n        }\r\n    }\r\n};\r\n\r\naddButton();\r\n\r\nlet btn = document.querySelector('.logout');\r\n\r\nconst logOut = () => {\r\n    localStorage.removeItem('authemailpassword');\r\n    localStorage.removeItem('isAuth');\r\n    addButton();\r\n}\r\n\r\nbtn?.addEventListener('click', logOut);\r\n\r\n\r\nplus.addEventListener('click', showModal)\r\n\r\ninput.addEventListener('input', () => {\r\n    if(!isvalid(input.value)) {\r\n        submitBtn.classList.add('opasiti');\r\n    } else {\r\n        submitBtn.disabled = false;\r\n        submitBtn.classList.remove('opasiti');\r\n    }\r\n})\r\nwindow.addEventListener('load', Question.renderList())\r\nform.addEventListener('submit', submitFormHandler);\r\n\r\nfunction submitFormHandler(event) {\r\n    event.preventDefault();\r\n    if(isvalid(input.value)) {\r\n        const question = {\r\n            text: input.value.trim(),\r\n            date: new Date().toJSON()\r\n        }\r\n        submitBtn.disabled = true;\r\n        Question.create(question).then(() => {\r\n            input.value = ''\r\n            submitBtn.classList.add('opasiti');\r\n            submitBtn.disabled = false;\r\n        })\r\n    }\r\n};\r\n\r\nfunction showModal() {\r\n    if (!JSON.parse(localStorage.getItem('isAuth'))) {\r\n        createModal('Авторизация', getAuthForm());\r\n        document.querySelector('.auth_form')\r\n        .addEventListener('submit', authFormHandler);\r\n    } else {\r\n        const authemail = JSON.parse(localStorage.getItem('authemailpassword')).email;\r\n        const authpassword = JSON.parse(localStorage.getItem('authemailpassword')).password;\r\n        authWithEmailAndPassword(authemail, authpassword)\r\n        .then(token => Question.getQuestions(token))\r\n        .then(renderModalAfterAuth);\r\n    }\r\n}\r\n\r\nlet email = ''\r\nlet password = ''\r\n\r\nfunction authFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    email = event.target.querySelector('#email').value;\r\n    password = event.target.querySelector('#password').value;\r\n\r\n    authWithEmailAndPassword(email, password)\r\n    .then(token => Question.getQuestions(token))\r\n    .then(renderModalAfterAuth);\r\n};\r\n\r\n\r\n\r\nfunction renderModalAfterAuth(content) {\r\n    console.log(content)\r\n    if(typeof content === 'string') {\r\n        createModal('Ошибка', content);\r\n        localStorage.setItem('isAuth', 'false');\r\n    } else {\r\n        createModal('', Question.listToHtml(content));\r\n        if(!!email && password){\r\n            const authemailpassword = {email, password};\r\n            localStorage.setItem('authemailpassword', JSON.stringify(authemailpassword))\r\n        }\r\n        localStorage.setItem('isAuth', 'true');\r\n        addButton();\r\n    }\r\n}\r\n"],"sourceRoot":""}